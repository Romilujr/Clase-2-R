paste(x,y)
paste(x, y)
paste(x,y)
x <- "HOLA"
y <- "UNTRM"
paste(x,y)
paste(x,y, sep="-")
area_cir <- function(radio){
pi=radio*radio
}
area_cir <- function(radio){
pi=radio*radio
}
area_cir(radio <- 10)
area_cir(radio <- 15)
View(area_cir)
calcular_IMC <- function(peso, altura) {
imc <- peso / (altura^2)
return(imc)
}# Ejemplo de uso
return(imc)
calcular_IMC <- function(peso, altura) {
imc <- peso / (altura^2)
return(imc)
}# Ejemplo de uso
imc <- calcular_IMC(peso, altura)
calcular_IMC <- function(peso,altura) {
imc <- peso / (altura^2)
return(imc)
}# Ejemplo de uso
imc <- peso / (altura^2)
imc <- peso/(altura^2)
return(imc)
calcular_IMC <- function(peso,altura) {
imc <- peso/(altura^2)
return(imc)
}# Ejemplo de uso
# Ejemplo de uso
# Peso en kg y altura en metros
peso <- 70
altura <- 1.75
imc <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", round(imc, 2)))
calcular_IMC <- function(peso,altura) {
imc <- peso/(altura^2)
return(imc)
}
# Ejemplo de uso
# Peso en kg y altura en metros
peso <- 70
altura <- 1.75
imc <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", round(imc, 2)))
# Función para calcular el IMC y clasificarlo
calcular_IMC <- function(peso, altura) {
imc <- peso / (altura^2)
# Clasificación del IMC
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc >= 18.5 && imc < 24.9) {
clasificacion <- "Peso normal"
} else if (imc >= 25 && imc < 29.9) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
return(list(IMC = round(imc, 2), Clasificación = clasificacion))
}
# Ejemplo de uso
peso <- 70     # Peso en kilogramos
print(paste("Clasificación:", resultado$Clasificación))
resultado <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", resultado$IMC))
print(paste("Clasificación:", resultado$Clasificación))
# Ejemplo de uso
peso <- 90     # Peso en kilogramos
# Ejemplo de uso
peso <- 90     # Peso en kilogramos
print(paste("Clasificación:", resultado$Clasificación))
# Ejemplo de uso
peso <- 90     # Peso en kilogramos
altura <- 1.75 # Altura en metros
print(paste("Tu IMC es:", resultado$IMC))
print(paste("Clasificación:", resultado$Clasificación))
# Ejemplo de uso
peso <- 90     # Peso en kilogramos
altura <- 1.75 # Altura en metros
resultado <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", resultado$IMC))
print(paste("Clasificación:", resultado$Clasificación))
# Ejemplo de uso
peso <- 65     # Peso en kilogramos
altura <- 1.55 # Altura en metros
resultado <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", resultado$IMC))
print(paste("Clasificación:", resultado$Clasificación))
# Ejemplo de uso
peso <- 58     # Peso en kilogramos
altura <- 1.57 # Altura en metros
resultado <- calcular_IMC(peso, altura)
print(paste("Tu IMC es:", resultado$IMC))
print(paste("Clasificación:", resultado$Clasificación))
# Definir las dosis (tratamientos)
dosis <- c(0, 50, 100, 150)
# Número de repeticiones
reps <- 5
# Crear el diseño experimental completamente al azar (DCA)
# Cada tratamiento tiene 5 repeticiones
# Expandimos el grid para tener todas las combinaciones posibles
dca <- expand.grid(Repetición = 1:reps, Dosis = dosis)
# Agregar una columna para identificar aleatoriamente el orden de los tratamientos
set.seed(123) # Para reproducibilidad
dca$Orden <- sample(1:nrow(dca))
# Ordenamos el dataframe basado en la columna Orden para aleatorizar
dca <- dca[order(dca$Orden), ]
# Ver el diseño experimental
print(dca)
# Opcional: exportar el diseño a un archivo CSV
write.csv(dca, "diseño_experimental_dca.csv", row.names = FALSE)
# Definir las dosis (tratamientos)
dosis <- c(0, 50, 100, 150)
# Número de repeticiones
reps <- 5
# Crear el diseño experimental completamente al azar (DCA)
# Cada tratamiento tiene 5 repeticiones
# Expandimos el grid para tener todas las combinaciones posibles
dca <- expand.grid(Repetición = 1:reps, Dosis = dosis)
# Agregar una columna para identificar aleatoriamente el orden de los tratamientos
set.seed(123) # Para reproducibilidad
dca$Orden <- sample(1:nrow(dca))
# Ordenamos el dataframe basado en la columna Orden para aleatorizar
dca <- dca[order(dca$Orden), ]
# Ver el diseño experimental
print(dca)
# Opcional: exportar el diseño a un archivo CSV
write.csv(dca, "diseño_experimental_dca.csv", row.names = FALSE)
# Instalar el paquete agricolae si no está instalado
install.packages("agricolae")
# Cargar el paquete
library(agricolae)
# Cargar el paquete
library(agricolae)
# Cargar el paquete
library(agricolae)
# Definir los niveles de fertilización (tratamientos)
fertilizacion <- c(0, 50, 100, 150)
# Definir el número de repeticiones
reps <- 5
# Crear el diseño completamente al azar (DCA)
diseño_dca <- design.crd(trt = fertilizacion, r = reps, seed = 123)
# Crear el diseño completamente al azar (DCA)
diseño_dca <- design.crd(trt = fertilizacion, r = reps, seed = 123)
# Mostrar el diseño
print(diseño_dca$book)
# Opcional: exportar el diseño a un archivo CSV
write.csv(diseño_dca$book, "diseño_experimental_dca_agricolae.csv", row.names = FALSE)
ds
trt<-c(0,50,100,150) # factorial 3x2
outdesign <-design.ab(trt, r=5, serie=2)
ds.<- agricolae::design.ab(4,5,serie = 2,design = c(rcbd),seed = 0,kinds = "super-Duper",first = TRUE,randomization = TRUE)
dosis <-c(0,50,100,150)# factorial 3x2
variedad <-c("canchan","peruanita")
ds <-agricolae::design.ab()
trt<-c(4.2)
outdesign <-design.ab(trt = trt,r=5)
trt<-c(4.2)
outdesign <-design.ab(trt = trt,r=5)
str(outdesign)
book<-outdesign$book
trt<-c(4.2)
outdesign <-design.ab(trt = trt,r=5)
trt<-c(4.2)
outdesign <-design.ab(trt=trt,r=5)
# factorial 4 x 2 with 5 blocks
library(agricolae)
trt<-c(4,2) # factorial 4x2
outdesign <-design.ab(trt, r=4, serie=2)
book<-outdesign$book
book
# factorial 4 x 2 with 5 blocks
library(agricolae)
trt<-c(4,2) # factorial 4x2
outdesign <-design.ab(trt, r=4, serie=2)
book<-outdesign$book
book
